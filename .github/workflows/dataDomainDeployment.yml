name: Data Domain Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'code/**'
      - 'infra/BigDataPool/**'
      - 'infra/CosmosDb/**'
      - 'infra/DataFactory/**'
      - 'infra/KeyVault/**'
      - 'infra/MariaDb/**'
      - 'infra/MySql/**'
      - 'infra/PostgreSql/**'
      - 'infra/SqlDatabase/**'
      - 'infra/SqlPool/**'
      - 'infra/SqlServer/**'
      - 'infra/Synapse/**'
      - '.github/workflows/dataDomainDeployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'code/**'
      - 'infra/BigDataPool/**'
      - 'infra/CosmosDb/**'
      - 'infra/DataFactory/**'
      - 'infra/KeyVault/**'
      - 'infra/MariaDb/**'
      - 'infra/MySql/**'
      - 'infra/PostgreSql/**'
      - 'infra/SqlDatabase/**'
      - 'infra/SqlPool/**'
      - 'infra/SqlServer/**'
      - 'infra/Synapse/**'
      - '.github/workflows/dataDomainDeployment.yml'

env:
  AZURE_SUBSCRIPTION_ID: '2f68ca09-59d9-4ab5-ad11-c54872bfa28d' # Update to '{dataLandingZoneSubscriptionId}'
  AZURE_RESOURCE_GROUP_NAME: 'dn001-dd001'                      # Update to '{dataLandingZoneName}-rg'
  AZURE_LOCATION: 'northeurope'                                 # Update to '{regionName}'

jobs:
  prerequisite:
    runs-on: ubuntu-latest

    steps:
    # Login to Azure
    - name: Azure Login
      id: azure_login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Validate existence of resource group
    - name: Validating existence of resource group
      id: resource_group_storage
      uses: azure/cli@v1
      with:
        azcliversion: latest
        inlineScript: |
          echo "Validating existence of resource group ${{ env.AZURE_RESOURCE_GROUP_NAME }}"
          az group exists --name ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    
    # Log out from Azure
    - name: Log out from Azure
      id: azure_logout
      uses: azure/cli@v1
      with:
        azcliversion: latest
        inlineScript: |
          az logout
    
  validation:
    needs: [ prerequisite ]
    runs-on: ubuntu-latest
    
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Check Out Repository
      id: checkout_repository
      uses: actions/checkout@v2
    
    # Login to Azure
    - name: Azure Login
      id: azure_login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Deploy Key Vault 001 - validation
    - name: Deploy Key Vault 001 - validation
      id: key_vault_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/KeyVault/deploy.keyVault.json
        parameters: ${{ github.workspace }}/infra/KeyVault/params.keyVault001.json
        deploymentMode: Validate
    
    # Generate Password 001
    - name: Generate Password 001
      id: generate_password_001
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy SQL Server 001 - validation
    - name: Deploy SQL Server 001 - validation
      id: sql_server_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/SqlServer/deploy.sqlServer.json
        parameters: ${{ github.workspace }}/infra/SqlServer/params.sqlServer001.json administratorLoginPassword="${{ steps.generate_password_001.outputs.password }}"
        deploymentMode: Validate
    
    # Deploy SQL Database 001 - validation
    - name: Deploy SQL Database 001 - validation
      id: sql_database_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/SqlDatabase/deploy.sqlDatabase.json
        parameters: ${{ github.workspace }}/infra/SqlDatabase/params.sqlDatabase001.json sqlServerAdministratorLoginPassword="${{ steps.generate_password_001.outputs.password }}"
        deploymentMode: Validate
    
    # Generate Password 002
    - name: Generate Password 002
      id: generate_password_002
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy Maria DB 001 - validation
    - name: Deploy Maria DB 001 - validation
      id: maria_db_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/MariaDb/deploy.mariaDb.json
        parameters: ${{ github.workspace }}/infra/MariaDb/params.mariaDb001.json mariaDbServerAdministratorLoginPassword="${{ steps.generate_password_002.outputs.password }}"
        deploymentMode: Validate
    
    # Generate Password 003
    - name: Generate Password 003
      id: generate_password_003
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy MySQL DB 001 - validation
    - name: Deploy MySQL DB 001 - validation
      id: mysql_db_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/MySql/deploy.mySql.json
        parameters: ${{ github.workspace }}/infra/MySql/params.mySql001.json mySqlServerAdministratorLoginPassword="${{ steps.generate_password_003.outputs.password }}"
        deploymentMode: Validate
    
    # Generate Password 004
    - name: Generate Password 004
      id: generate_password_004
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy PostgreSQL DB 001 - validation
    - name: Deploy PostgreSQL DB 001 - validation
      id: postgresql_db_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/PostgreSql/deploy.postgreSql.json
        parameters: ${{ github.workspace }}/infra/PostgreSql/params.postgreSql001.json postgreSqlServerAdministratorLoginPassword="${{ steps.generate_password_004.outputs.password }}"
        deploymentMode: Validate
    
    # Deploy Cosmos DB 001 - validation
    - name: Deploy Cosmos  DB 001 - validation
      id: cosmos_db_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/CosmosDb/deploy.cosmosDb.json
        parameters: ${{ github.workspace }}/infra/CosmosDb/params.cosmosDb001.json
        deploymentMode: Validate
    
    # Deploy Data Factory 001 - validation
    - name: Deploy Data Factory 001 - validation
      id: data_factory_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/DataFactory/deploy.dataFactory.json
        parameters: ${{ github.workspace }}/infra/DataFactory/params.dataFactory001.json
        deploymentMode: Validate
    
    # Generate Password 005
    - name: Generate Password 005
      id: generate_password_005
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy Synapse 001 - validation
    - name: Deploy Synapse 001 - validation
      id: synapse_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/Synapse/deploy.synapse.json
        parameters: ${{ github.workspace }}/infra/Synapse/params.synapse001.json synapseSqlAdministratorPassword="${{ steps.generate_password_005.outputs.password }}"
        deploymentMode: Validate
    
    # Deploy Sql Pool 001 - validation
    - name: Deploy Sql Pool 001 - validation
      id: sql_pool_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/SqlPool/deploy.sqlPool.json
        parameters: ${{ github.workspace }}/infra/SqlPool/params.sqlPool001.json
        deploymentMode: Validate
    
    # Deploy Big Data Pool 001 - validation
    - name: Deploy Big Data Pool 001 - validation
      id: big_data_pool_001_validation
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/BigDataPool/deploy.bigDataPool.json
        parameters: ${{ github.workspace }}/infra/BigDataPool/params.bigDataPool001.json
        deploymentMode: Validate

    # Log out from Azure
    - name: Log out from Azure
      id: azure_logout
      uses: azure/cli@v1
      with:
        azcliversion: latest
        inlineScript: |
          az logout
    
  deployment:
    needs: [ prerequisite, validation ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Check Out Repository
      id: checkout_repository
      uses: actions/checkout@v2
    
    # Login to Azure
    - name: Azure Login
      id: azure_login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Deploy Key Vault 001
    - name: Deploy Key Vault 001
      id: key_vault_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/KeyVault/deploy.keyVault.json
        parameters: ${{ github.workspace }}/infra/KeyVault/params.keyVault001.json
        deploymentMode: Incremental
    
    # Generate Password 001
    - name: Generate Password 001
      id: generate_password_001
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy SQL Server 001
    - name: Deploy SQL Server 001
      id: sql_server_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/SqlServer/deploy.sqlServer.json
        parameters: ${{ github.workspace }}/infra/SqlServer/params.sqlServer001.json administratorLoginPassword="${{ steps.generate_password_001.outputs.password }}"
        deploymentMode: Incremental
    
    # # Deploy SQL Database 001
    # - name: Deploy SQL Database 001
    #   id: sql_database_001_deployment
    #   uses: azure/arm-deploy@v1
    #   with:
    #     scope: resourcegroup
    #     subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
    #     resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    #     region: ${{ env.AZURE_LOCATION }}
    #     template: ${{ github.workspace }}/infra/SqlDatabase/deploy.sqlDatabase.json
    #     parameters: ${{ github.workspace }}/infra/SqlDatabase/params.sqlDatabase001.json sqlServerAdministratorLoginPassword="${{ steps.generate_password_001.outputs.password }}"
    #     deploymentMode: Incremental
    
    # # Generate Password 002
    # - name: Generate Password 002
    #   id: generate_password_002
    #   run: |
    #     echo "Generating Password"
    #     pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # # Deploy Maria DB 001
    # - name: Deploy Maria DB 001
    #   id: maria_db_001_deployment
    #   uses: azure/arm-deploy@v1
    #   with:
    #     scope: resourcegroup
    #     subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
    #     resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    #     region: ${{ env.AZURE_LOCATION }}
    #     template: ${{ github.workspace }}/infra/MariaDb/deploy.mariaDb.json
    #     parameters: ${{ github.workspace }}/infra/MariaDb/params.mariaDb001.json mariaDbServerAdministratorLoginPassword="${{ steps.generate_password_002.outputs.password }}"
    #     deploymentMode: Incremental
    
    # # Generate Password 003
    # - name: Generate Password 003
    #   id: generate_password_003
    #   run: |
    #     echo "Generating Password"
    #     pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # # Deploy MySQL DB 001
    # - name: Deploy MySQL DB 001
    #   id: mysql_db_001_deployment
    #   uses: azure/arm-deploy@v1
    #   with:
    #     scope: resourcegroup
    #     subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
    #     resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    #     region: ${{ env.AZURE_LOCATION }}
    #     template: ${{ github.workspace }}/infra/MySql/deploy.mySql.json
    #     parameters: ${{ github.workspace }}/infra/MySql/params.mySql001.json mySqlServerAdministratorLoginPassword="${{ steps.generate_password_003.outputs.password }}"
    #     deploymentMode: Incremental
    
    # # Generate Password 004
    # - name: Generate Password 004
    #   id: generate_password_004
    #   run: |
    #     echo "Generating Password"
    #     pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # # Deploy PostgreSQL DB 001
    # - name: Deploy PostgreSQL DB 001
    #   id: postgresql_db_001_deployment
    #   uses: azure/arm-deploy@v1
    #   with:
    #     scope: resourcegroup
    #     subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
    #     resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    #     region: ${{ env.AZURE_LOCATION }}
    #     template: ${{ github.workspace }}/infra/PostgreSql/deploy.postgreSql.json
    #     parameters: ${{ github.workspace }}/infra/PostgreSql/params.postgreSql001.json postgreSqlServerAdministratorLoginPassword="${{ steps.generate_password_004.outputs.password }}"
    #     deploymentMode: Incremental
    
    # Deploy Cosmos DB 001
    - name: Deploy Cosmos  DB 001
      id: cosmos_db_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/CosmosDb/deploy.cosmosDb.json
        parameters: ${{ github.workspace }}/infra/CosmosDb/params.cosmosDb001.json
        deploymentMode: Incremental
    
    # Deploy Data Factory 001
    - name: Deploy Data Factory 001
      id: data_factory_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/DataFactory/deploy.dataFactory.json
        parameters: ${{ github.workspace }}/infra/DataFactory/params.dataFactory001.json
        deploymentMode: Incremental
    
    # Generate Password 005
    - name: Generate Password 005
      id: generate_password_005
      run: |
        echo "Generating Password"
        pwsh $GITHUB_WORKSPACE/code/GeneratePassword.ps1 -GitHub
    
    # Deploy Synapse 001
    - name: Deploy Synapse 001
      id: synapse_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/Synapse/deploy.synapse.json
        parameters: ${{ github.workspace }}/infra/Synapse/params.synapse001.json synapseSqlAdministratorPassword="${{ steps.generate_password_005.outputs.password }}"
        deploymentMode: Incremental
    
    # # Deploy Sql Pool 001
    # - name: Deploy Sql Pool 001
    #   id: sql_pool_001_deployment
    #   uses: azure/arm-deploy@v1
    #   with:
    #     scope: resourcegroup
    #     subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
    #     resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
    #     region: ${{ env.AZURE_LOCATION }}
    #     template: ${{ github.workspace }}/infra/SqlPool/deploy.sqlPool.json
    #     parameters: ${{ github.workspace }}/infra/SqlPool/params.sqlPool001.json
    #     deploymentMode: Incremental
    
    # Deploy Big Data Pool 001
    - name: Deploy Big Data Pool 001
      id: big_data_pool_001_deployment
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        region: ${{ env.AZURE_LOCATION }}
        template: ${{ github.workspace }}/infra/BigDataPool/deploy.bigDataPool.json
        parameters: ${{ github.workspace }}/infra/BigDataPool/params.bigDataPool001.json
        deploymentMode: Incremental

    # Log out from Azure
    - name: Log out from Azure
      id: azure_logout
      uses: azure/cli@v1
      with:
        azcliversion: latest
        inlineScript: |
          az logout
